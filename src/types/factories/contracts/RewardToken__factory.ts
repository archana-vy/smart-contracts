/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  RewardToken,
  RewardTokenInterface,
} from "../../contracts/RewardToken";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040518060400160405280601281526020017f5661756c742052657761726420546f6b656e00000000000000000000000000008152506040518060400160405280600381526020017f5652540000000000000000000000000000000000000000000000000000000000815250816003908051906020019062000096929190620000ef565b508060049080519060200190620000af929190620000ef565b505050620000e67f6133dbe22ae658701485e00cb720bb90aa7a4756640a69fbde5e3c7ea4104fb960001b620000ec60201b60201c565b62000204565b50565b828054620000fd906200019f565b90600052602060002090601f0160209004810192826200012157600085556200016d565b82601f106200013c57805160ff19168380011785556200016d565b828001600101855582156200016d579182015b828111156200016c5782518255916020019190600101906200014f565b5b5090506200017c919062000180565b5090565b5b808211156200019b57600081600090555060010162000181565b5090565b60006002820490506001821680620001b857607f821691505b60208210811415620001cf57620001ce620001d5565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6118e880620002146000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806340c10f191161008c5780639dc29fac116100665780639dc29fac14610228578063a457c2d714610244578063a9059cbb14610274578063dd62ed3e146102a4576100cf565b806340c10f19146101be57806370a08231146101da57806395d89b411461020a576100cf565b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461012257806323b872dd14610140578063313ce56714610170578063395093511461018e575b600080fd5b6100dc6102d4565b6040516100e9919061124e565b60405180910390f35b61010c6004803603810190610107919061102f565b610366565b6040516101199190611233565b60405180910390f35b61012a610389565b60405161013791906113b0565b60405180910390f35b61015a60048036038101906101559190610fdc565b610393565b6040516101679190611233565b60405180910390f35b6101786103c2565b60405161018591906113cb565b60405180910390f35b6101a860048036038101906101a3919061102f565b6103cb565b6040516101b59190611233565b60405180910390f35b6101d860048036038101906101d3919061102f565b610402565b005b6101f460048036038101906101ef9190610f6f565b610494565b60405161020191906113b0565b60405180910390f35b6102126104dc565b60405161021f919061124e565b60405180910390f35b610242600480360381019061023d919061102f565b61056e565b005b61025e6004803603810190610259919061102f565b610600565b60405161026b9190611233565b60405180910390f35b61028e6004803603810190610289919061102f565b610677565b60405161029b9190611233565b60405180910390f35b6102be60048036038101906102b99190610f9c565b61069a565b6040516102cb91906113b0565b60405180910390f35b6060600380546102e390611514565b80601f016020809104026020016040519081016040528092919081815260200182805461030f90611514565b801561035c5780601f106103315761010080835404028352916020019161035c565b820191906000526020600020905b81548152906001019060200180831161033f57829003601f168201915b5050505050905090565b600080610371610721565b905061037e818585610729565b600191505092915050565b6000600254905090565b60008061039e610721565b90506103ab8582856108f4565b6103b6858585610980565b60019150509392505050565b60006012905090565b6000806103d6610721565b90506103f78185856103e8858961069a565b6103f29190611402565b610729565b600191505092915050565b61042e7f1d0363b129a66a208ee72bd7371ecbe0c58c360811611588b6f70f9796e7608160001b610c01565b61045a7f618f2166d6e1a1d6e00aba5400e606671bb875a623f4f86a5a72f5d81610fc0760001b610c01565b6104867f9060e380fa9e2268f508ffe14653d79f4138e80624767c4db784d924d77d8f6460001b610c01565b6104908282610c04565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546104eb90611514565b80601f016020809104026020016040519081016040528092919081815260200182805461051790611514565b80156105645780601f1061053957610100808354040283529160200191610564565b820191906000526020600020905b81548152906001019060200180831161054757829003601f168201915b5050505050905090565b61059a7f375e6b203c795d47e99000976d237a46073cfea75877aa0117dda3a9fee96c6560001b610c01565b6105c67f1ca81c6c3e03e9408ab76f59520eec346fe93a77e85bf4e8d386f62f67001f5160001b610c01565b6105f27fe653a452b6b8f2e4e3cb49c6c6805071e5d423abe3d4a2b652b7138a0ce68b5860001b610c01565b6105fc8282610d64565b5050565b60008061060b610721565b90506000610619828661069a565b90508381101561065e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065590611370565b60405180910390fd5b61066b8286868403610729565b60019250505092915050565b600080610682610721565b905061068f818585610980565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610799576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079090611350565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610809576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610800906112b0565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516108e791906113b0565b60405180910390a3505050565b6000610900848461069a565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461097a578181101561096c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610963906112d0565b60405180910390fd5b6109798484848403610729565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156109f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e790611330565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5790611270565b60405180910390fd5b610a6b838383610f3b565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610af1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae8906112f0565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b849190611402565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610be891906113b0565b60405180910390a3610bfb848484610f40565b50505050565b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6b90611390565b60405180910390fd5b610c8060008383610f3b565b8060026000828254610c929190611402565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ce79190611402565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610d4c91906113b0565b60405180910390a3610d6060008383610f40565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610dd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dcb90611310565b60405180910390fd5b610de082600083610f3b565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610e66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5d90611290565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160026000828254610ebd9190611458565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610f2291906113b0565b60405180910390a3610f3683600084610f40565b505050565b505050565b505050565b600081359050610f5481611884565b92915050565b600081359050610f698161189b565b92915050565b600060208284031215610f8557610f846115a4565b5b6000610f9384828501610f45565b91505092915050565b60008060408385031215610fb357610fb26115a4565b5b6000610fc185828601610f45565b9250506020610fd285828601610f45565b9150509250929050565b600080600060608486031215610ff557610ff46115a4565b5b600061100386828701610f45565b935050602061101486828701610f45565b925050604061102586828701610f5a565b9150509250925092565b60008060408385031215611046576110456115a4565b5b600061105485828601610f45565b925050602061106585828601610f5a565b9150509250929050565b6110788161149e565b82525050565b6000611089826113e6565b61109381856113f1565b93506110a38185602086016114e1565b6110ac816115a9565b840191505092915050565b60006110c46023836113f1565b91506110cf826115ba565b604082019050919050565b60006110e76022836113f1565b91506110f282611609565b604082019050919050565b600061110a6022836113f1565b915061111582611658565b604082019050919050565b600061112d601d836113f1565b9150611138826116a7565b602082019050919050565b60006111506026836113f1565b915061115b826116d0565b604082019050919050565b60006111736021836113f1565b915061117e8261171f565b604082019050919050565b60006111966025836113f1565b91506111a18261176e565b604082019050919050565b60006111b96024836113f1565b91506111c4826117bd565b604082019050919050565b60006111dc6025836113f1565b91506111e78261180c565b604082019050919050565b60006111ff601f836113f1565b915061120a8261185b565b602082019050919050565b61121e816114ca565b82525050565b61122d816114d4565b82525050565b6000602082019050611248600083018461106f565b92915050565b60006020820190508181036000830152611268818461107e565b905092915050565b60006020820190508181036000830152611289816110b7565b9050919050565b600060208201905081810360008301526112a9816110da565b9050919050565b600060208201905081810360008301526112c9816110fd565b9050919050565b600060208201905081810360008301526112e981611120565b9050919050565b6000602082019050818103600083015261130981611143565b9050919050565b6000602082019050818103600083015261132981611166565b9050919050565b6000602082019050818103600083015261134981611189565b9050919050565b60006020820190508181036000830152611369816111ac565b9050919050565b60006020820190508181036000830152611389816111cf565b9050919050565b600060208201905081810360008301526113a9816111f2565b9050919050565b60006020820190506113c56000830184611215565b92915050565b60006020820190506113e06000830184611224565b92915050565b600081519050919050565b600082825260208201905092915050565b600061140d826114ca565b9150611418836114ca565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561144d5761144c611546565b5b828201905092915050565b6000611463826114ca565b915061146e836114ca565b92508282101561148157611480611546565b5b828203905092915050565b6000611497826114aa565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b838110156114ff5780820151818401526020810190506114e4565b8381111561150e576000848401525b50505050565b6000600282049050600182168061152c57607f821691505b602082108114156115405761153f611575565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b61188d8161148c565b811461189857600080fd5b50565b6118a4816114ca565b81146118af57600080fd5b5056fea2646970667358221220de6d670549d5f2cd1915680a1c03eb51a356fa6ffc367f3a7672041b78fec19f64736f6c63430008070033";

type RewardTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RewardTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RewardToken__factory extends ContractFactory {
  constructor(...args: RewardTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RewardToken> {
    return super.deploy(overrides || {}) as Promise<RewardToken>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RewardToken {
    return super.attach(address) as RewardToken;
  }
  override connect(signer: Signer): RewardToken__factory {
    return super.connect(signer) as RewardToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RewardTokenInterface {
    return new utils.Interface(_abi) as RewardTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RewardToken {
    return new Contract(address, _abi, signerOrProvider) as RewardToken;
  }
}
