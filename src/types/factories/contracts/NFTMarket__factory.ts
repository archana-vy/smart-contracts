/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { NFTMarket, NFTMarketInterface } from "../../contracts/NFTMarket";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_payToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_NFT",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "NFT",
    outputs: [
      {
        internalType: "contract IERC721",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
    ],
    name: "buyNFT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_newPrice",
        type: "uint256",
      },
    ],
    name: "createNFTSale",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "mintingFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "payToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "removeNFTSale",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_newFee",
        type: "uint256",
      },
    ],
    name: "setMintingFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052670de0b6b3a76400006000553480156200001d57600080fd5b5060405162001472380380620014728339818101604052810190620000439190620001f8565b6200005982620001be60201b62000b451760201c565b6200009b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200009290620002af565b60405180910390fd5b620000b181620001be60201b62000b451760201c565b620000f3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000ea906200028d565b60405180910390fd5b81600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000387565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600081519050620001f2816200036d565b92915050565b6000806040838503121562000212576200021162000316565b5b60006200022285828601620001e1565b92505060206200023585828601620001e1565b9150509250929050565b60006200024e601583620002d1565b91506200025b826200031b565b602082019050919050565b600062000275601783620002d1565b9150620002828262000344565b602082019050919050565b60006020820190508181036000830152620002a8816200023f565b9050919050565b60006020820190508181036000830152620002ca8162000266565b9050919050565b600082825260208201905092915050565b6000620002ef82620002f6565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b7f4e4654204953204e4f54204120434f4e54524143540000000000000000000000600082015250565b7f544f4b454e204953204e4f54204120434f4e5452414354000000000000000000600082015250565b6200037881620002e2565b81146200038457600080fd5b50565b6110db80620003976000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80635a64ad951161005b5780635a64ad95146100d65780637861db2b146100f45780637c0b8de21461011057806396336b301461012e5761007d565b80631d85bf0314610082578063238a47091461009e57806343db97b2146100ba575b600080fd5b61009c60048036038101906100979190610c2e565b61014c565b005b6100b860048036038101906100b39190610c01565b610527565b005b6100d460048036038101906100cf9190610c01565b6105c1565b005b6100de610899565b6040516100eb9190610ea9565b60405180910390f35b61010e60048036038101906101099190610c2e565b61089f565b005b610118610af9565b6040516101259190610dce565b60405180910390f35b610136610b1f565b6040516101439190610db3565b60405180910390f35b6000600160008481526020019081526020016000205490506000811180156102495750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004016101ca9190610ea9565b60206040518083038186803b1580156101e257600080fd5b505afa1580156101f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021a9190610ba7565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16145b610288576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027f90610de9565b60405180910390fd5b60006002600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561032f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032690610e69565b60405180910390fd5b81831015610372576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036990610e49565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3383856040518463ffffffff1660e01b81526004016103d193929190610d7c565b602060405180830381600087803b1580156103eb57600080fd5b505af11580156103ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104239190610bd4565b506000600160008681526020019081526020016000208190555060006002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3033876040518463ffffffff1660e01b81526004016104ef93929190610d7c565b600060405180830381600087803b15801561050957600080fd5b505af115801561051d573d6000803e3d6000fd5b5050505050505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ae90610e29565b60405180910390fd5b8060008190555050565b600060016000838152602001908152602001600020541180156106b95750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e826040518263ffffffff1660e01b815260040161063a9190610ea9565b60206040518083038186803b15801561065257600080fd5b505afa158015610666573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068a9190610ba7565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16145b6106f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ef90610de9565b60405180910390fd5b6002600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610799576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079090610e89565b60405180910390fd5b6000600160008381526020019081526020016000208190555060006002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3033846040518463ffffffff1660e01b815260040161086493929190610d7c565b600060405180830381600087803b15801561087e57600080fd5b505af1158015610892573d6000803e3d6000fd5b5050505050565b60005481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016108fa9190610ea9565b60206040518083038186803b15801561091257600080fd5b505afa158015610926573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094a9190610ba7565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ae90610e89565b60405180910390fd5b600081116109fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f190610e09565b60405180910390fd5b806001600084815260200190815260200160002081905550336002600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401610ac393929190610d7c565b600060405180830381600087803b158015610add57600080fd5b505af1158015610af1573d6000803e3d6000fd5b505050505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600081519050610b7781611060565b92915050565b600081519050610b8c81611077565b92915050565b600081359050610ba18161108e565b92915050565b600060208284031215610bbd57610bbc610f65565b5b6000610bcb84828501610b68565b91505092915050565b600060208284031215610bea57610be9610f65565b5b6000610bf884828501610b7d565b91505092915050565b600060208284031215610c1757610c16610f65565b5b6000610c2584828501610b92565b91505092915050565b60008060408385031215610c4557610c44610f65565b5b6000610c5385828601610b92565b9250506020610c6485828601610b92565b9150509250929050565b610c7781610ed5565b82525050565b610c8681610f1d565b82525050565b610c9581610f2f565b82525050565b6000610ca8600f83610ec4565b9150610cb382610f6a565b602082019050919050565b6000610ccb601883610ec4565b9150610cd682610f93565b602082019050919050565b6000610cee600a83610ec4565b9150610cf982610fbc565b602082019050919050565b6000610d11601283610ec4565b9150610d1c82610fe5565b602082019050919050565b6000610d34600983610ec4565b9150610d3f8261100e565b602082019050919050565b6000610d57600d83610ec4565b9150610d6282611037565b602082019050919050565b610d7681610f13565b82525050565b6000606082019050610d916000830186610c6e565b610d9e6020830185610c6e565b610dab6040830184610d6d565b949350505050565b6000602082019050610dc86000830184610c7d565b92915050565b6000602082019050610de36000830184610c8c565b92915050565b60006020820190508181036000830152610e0281610c9b565b9050919050565b60006020820190508181036000830152610e2281610cbe565b9050919050565b60006020820190508181036000830152610e4281610ce1565b9050919050565b60006020820190508181036000830152610e6281610d04565b9050919050565b60006020820190508181036000830152610e8281610d27565b9050919050565b60006020820190508181036000830152610ea281610d4a565b9050919050565b6000602082019050610ebe6000830184610d6d565b92915050565b600082825260208201905092915050565b6000610ee082610ef3565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610f2882610f41565b9050919050565b6000610f3a82610f41565b9050919050565b6000610f4c82610f53565b9050919050565b6000610f5e82610ef3565b9050919050565b600080fd5b7f4e4654204e4f54204f4e2053414c450000000000000000000000000000000000600082015250565b7f4e46542056414c55452043414e4e4f54204245205a45524f0000000000000000600082015250565b7f4f4e4c59204f574e455200000000000000000000000000000000000000000000600082015250565b7f494e53554646494349454e542050524943450000000000000000000000000000600082015250565b7f4e4654204f574e45520000000000000000000000000000000000000000000000600082015250565b7f4e4f54204e4654204f574e455200000000000000000000000000000000000000600082015250565b61106981610ed5565b811461107457600080fd5b50565b61108081610ee7565b811461108b57600080fd5b50565b61109781610f13565b81146110a257600080fd5b5056fea264697066735822122048f80c711079d4e1129c00022a6cce47adc32a11b3cc0772c72546f8774c512064736f6c63430008070033";

type NFTMarketConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NFTMarketConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NFTMarket__factory extends ContractFactory {
  constructor(...args: NFTMarketConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _payToken: PromiseOrValue<string>,
    _NFT: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NFTMarket> {
    return super.deploy(_payToken, _NFT, overrides || {}) as Promise<NFTMarket>;
  }
  override getDeployTransaction(
    _payToken: PromiseOrValue<string>,
    _NFT: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_payToken, _NFT, overrides || {});
  }
  override attach(address: string): NFTMarket {
    return super.attach(address) as NFTMarket;
  }
  override connect(signer: Signer): NFTMarket__factory {
    return super.connect(signer) as NFTMarket__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NFTMarketInterface {
    return new utils.Interface(_abi) as NFTMarketInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NFTMarket {
    return new Contract(address, _abi, signerOrProvider) as NFTMarket;
  }
}
