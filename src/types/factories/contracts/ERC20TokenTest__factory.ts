/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  ERC20TokenTest,
  ERC20TokenTestInterface,
} from "../../contracts/ERC20TokenTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "testBurn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "testMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516104f53803806104f583398181016040528101906100329190610126565b6100647f0b9b6aab6655fa068a58f7429a741b0cdf8b680c9d13f8170daad7ef84f6cf1560001b61010e60201b60201c565b6100967ffac6348813540ea4c19f64d48be66dc3d451d990acace8bb53e609f2dbdc197d60001b61010e60201b60201c565b6100c87f60ae6129117b77172edb83c90a8d4b19e38493b58d1bfb3ba1d5d1351fb5ee6660001b61010e60201b60201c565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506101a1565b50565b6000815190506101208161018a565b92915050565b60006020828403121561013c5761013b610185565b5b600061014a84828501610111565b91505092915050565b600061015e82610165565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b61019381610153565b811461019e57600080fd5b50565b610345806101b06000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80639642ddaf1461003b578063e13aba4814610045575b600080fd5b61004361004f565b005b61004d610163565b005b61007b7f6017537b020c9f0f2431a1fbd76231091437bf3a9367d71cb0db960047c0602360001b610277565b6100a77f8305f66dbb5e440462bc009b22ce9463ed70550415bb077414cb53badf28158260001b610277565b6100d37f42cb524e69d6817b02c5ddc76dae9315e6e05f8792a1584e9c59598719d4a8a960001b610277565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f193360646040518363ffffffff1660e01b815260040161012f929190610298565b600060405180830381600087803b15801561014957600080fd5b505af115801561015d573d6000803e3d6000fd5b50505050565b61018f7f0db37d27cbe0e61144b3a4aa349e401ff2b23801bff3394546d2381f5aa9bc9a60001b610277565b6101bb7f47939f488757bf394503c4f3450be83cba60a502d7a4e0dabdcbe8d8eb119ec660001b610277565b6101e77f6f5fcd4ac62c2bdd25653016adfb52850fee5c1a8d7f7343ca694867aa213e8b60001b610277565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac3360646040518363ffffffff1660e01b8152600401610243929190610298565b600060405180830381600087803b15801561025d57600080fd5b505af1158015610271573d6000803e3d6000fd5b50505050565b50565b610283816102c1565b82525050565b610292816102fd565b82525050565b60006040820190506102ad600083018561027a565b6102ba6020830184610289565b9392505050565b60006102cc826102d3565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610308826102f3565b905091905056fea2646970667358221220eb6afa1247830db9c0b9cd901749dfc44a6001de96b40b41820e48a6f68739d964736f6c63430008070033";

type ERC20TokenTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20TokenTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20TokenTest__factory extends ContractFactory {
  constructor(...args: ERC20TokenTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC20TokenTest> {
    return super.deploy(token, overrides || {}) as Promise<ERC20TokenTest>;
  }
  override getDeployTransaction(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(token, overrides || {});
  }
  override attach(address: string): ERC20TokenTest {
    return super.attach(address) as ERC20TokenTest;
  }
  override connect(signer: Signer): ERC20TokenTest__factory {
    return super.connect(signer) as ERC20TokenTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20TokenTestInterface {
    return new utils.Interface(_abi) as ERC20TokenTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20TokenTest {
    return new Contract(address, _abi, signerOrProvider) as ERC20TokenTest;
  }
}
