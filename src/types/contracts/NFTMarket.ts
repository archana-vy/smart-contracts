/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface NFTMarketInterface extends utils.Interface {
  functions: {
    "NFT()": FunctionFragment;
    "buyNFT(uint256,uint256)": FunctionFragment;
    "createNFTSale(uint256,uint256)": FunctionFragment;
    "mintingFee()": FunctionFragment;
    "payToken()": FunctionFragment;
    "removeNFTSale(uint256)": FunctionFragment;
    "setMintingFee(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "NFT"
      | "buyNFT"
      | "createNFTSale"
      | "mintingFee"
      | "payToken"
      | "removeNFTSale"
      | "setMintingFee"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "NFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyNFT",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createNFTSale",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintingFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "payToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeNFTSale",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintingFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "NFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createNFTSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintingFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeNFTSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintingFee",
    data: BytesLike
  ): Result;

  events: {};
}

export interface NFTMarket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTMarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    NFT(overrides?: CallOverrides): Promise<[string]>;

    buyNFT(
      _tokenId: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createNFTSale(
      _tokenId: PromiseOrValue<BigNumberish>,
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    payToken(overrides?: CallOverrides): Promise<[string]>;

    removeNFTSale(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMintingFee(
      _newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  NFT(overrides?: CallOverrides): Promise<string>;

  buyNFT(
    _tokenId: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createNFTSale(
    _tokenId: PromiseOrValue<BigNumberish>,
    _newPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintingFee(overrides?: CallOverrides): Promise<BigNumber>;

  payToken(overrides?: CallOverrides): Promise<string>;

  removeNFTSale(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMintingFee(
    _newFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    NFT(overrides?: CallOverrides): Promise<string>;

    buyNFT(
      _tokenId: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createNFTSale(
      _tokenId: PromiseOrValue<BigNumberish>,
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintingFee(overrides?: CallOverrides): Promise<BigNumber>;

    payToken(overrides?: CallOverrides): Promise<string>;

    removeNFTSale(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintingFee(
      _newFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    NFT(overrides?: CallOverrides): Promise<BigNumber>;

    buyNFT(
      _tokenId: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createNFTSale(
      _tokenId: PromiseOrValue<BigNumberish>,
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintingFee(overrides?: CallOverrides): Promise<BigNumber>;

    payToken(overrides?: CallOverrides): Promise<BigNumber>;

    removeNFTSale(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMintingFee(
      _newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyNFT(
      _tokenId: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createNFTSale(
      _tokenId: PromiseOrValue<BigNumberish>,
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeNFTSale(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMintingFee(
      _newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
